<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTI+AVxmfAJrdo8CdICbAnWB
        mwJ0gJoCdoOdAnWBmwJncooCT1hsAj1FVQIeIioBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX2qBAW15
        kwR0gZsIdICbDHN/mg50gZsObnmTDGNuhQhQWW0ERU1fAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRw
        iBdrd5BHc3+abHSAm4NzgJqQdICbkm15kotlcIhzVF1yT0hQYhwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAb4CZG32M
        qHd+janHgY+s8nuKpfN2hZ7zdIGa83N/mfN2g53zf4yo84WTsPOMmrnzfoyo8llid9clKTKUBwgLSwEB
        ASEAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh5a0LIOU
        sKiDkq/6d4ag/3CBmf9tgpj/aoOX/2CAkP93i6P/g5Ku/4ORrv+HlbP/i5m3/4qYtv+Jl7X/jJq5/4ya
        uv9aY3nuERMYrAAAAHUAAABFAAAAIAAAAAoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmKjJA5Sk
        w4aGlLH7c4Sc/2ODlP8ee3D/P3h8/12Bj/9UfYj/K46C/0N/gf+Jm7f/jp27/42buf+SocD/lKLD/5Ke
        wf+RnMD/j5e+/5Odw/+Ajav+KC04zQAAAIwAAABoAAAARgAAACkAAAARAAAABAAAAAAAAAAAAAAAAJur
        zAKXp8epfYul/3yLpf95jaX/YIuX/xuTgP8peHH/QXJ3/ztwc/9HiYn/OZqL/4ebtv+VpcT/k6LB/5Kh
        wP+Xpcj/iom6/4J2sf+NgsD/jobA/5OYxP+Om7z/NDpI3QAAAJoAAAB7AAAAWAAAADgAAAAcAAAACwAA
        AAAAAAAAna3Oc4GPqv+Bj6r/hpax/4KXsP9fhpP/L5eI/ySPff8jjHv/Jm5m/0J2ev9ipKX/hZy1/5ur
        y/+Xp8f/laXE/5CSvv90QJ//aDyV/3BJof9/XbT/jH7A/5eeyf+Qn7//LTM+1AAAAJIAAAB1AAAAVAAA
        ADQAAAAaAAAAAKCx0Q2To8HwgY+p/4GPqf+JmbX/ip65/3GVpv89pZX/NZ+O/zWfjv8ykoP/PnZ2/3eW
        qv+Tp8X/na7O/52uzv+Zqcj/laDF/5KLxP+NWb7/ciWn/3A/pP+BZrT/lJTH/52rzv+JmLX+GBshpAAA
        AGcAAABPAAAANQAAAB0AAAAAobLTXImYs/99iqP/eIae/4uZtP+TpcH/i6K7/2Wqq/9KrJ3/R6ub/0ek
        lv9UqKD/apGe/5qsy/+fsND/oLHR/5+vz/+Zpsn/kY/D/4Zlvf+IT7//eyi3/3I6qf+QkMH/nqzQ/6Gy
        0v9odIvvBQYIQwAAACkAAAAcAAAAEAAAAACgstCYhpWv/3iFmv95hZr/kZ+2/5qqxP+UqMP/h6G5/2qY
        o/9hkpr/XJCX/4ejuv9xsbP/iqO6/6Gz0v+is9P/o7TU/5+u0P+Xmsj/jX/B/4djvv+XUtT/gC/E/4p7
        u/+isdT/o7XV/56wz/81O0iNBwgKCgAAAAUAAAACAAAAAJ6wzrOJmLL/eoST/4KJlP+bn6H/oaq1/6Cu
        w/+br8z/lKzG/5KrxP+Ursf/oLTS/6K00v+dt9H/orXT/6W31v+kttX/pLXW/6Cs0f+XmMr/lI/I/52N
        0v+fc9z/pLDW/6a32P+muNj/prjY/3F+lu8+RlULAAAAAAAAAAAAAAAAn7HPto6etv+HhoH/hms7/5uN
        bP+PcDz/o6ep/6i3zv+pu9j/qrzZ/6/A3f+mutj/pbnX/5Wry/+juNf/r8Db/7LC3f+yw93/r77c/6W1
        1f+eqtD/oa3T/6e22v+putv/qbzc/6m72/+ou9v/m6zJ/09ZbFcAAAAAAAAAAAAAAACmudeplaW9/5GV
        lP+vgyf/pHcZ/6h7G/+jm4T/rbW+/6/B3f+uwNz/scLe/6q+3f+Dosn/SXen/12Bqf+Pp8f/p7vY/7LE
        3v+7y+P/vczj/7bG3v+tvdn/qbza/6u+3v+sv97/rL/e/6u+3f+rv97/WWN3mAAAAAAAAAAAAAAAAKq9
        2oSer8f/naex/7KbWv+2jRr/qoUi/6+dcf+wsaj/ssHY/7PF4f+vwd3/objY/3CVwP9Ee7P/Kmin/z5v
        pP93mL//lK3N/7DD3v+7zOX/u8zk/7jJ4P+2x9//ssXh/6/C4f+uwuH/rsLh/63B4P9lcoe9AAAAAAAA
        AAAAAAAArsLfS6W30f+msr7/vJ0o/8OfGf+ykiD/o41W/7CrmP+yvs3/tMfi/7PH4v+mu9r/c5nE/yNv
        vf8hb8D/Im69/1GDtv94msH/o7rZ/7XI4/+6zOb/uMrj/7XG3/+zxd//tcnk/7LH5P+xxuT/scXj/2t4
        jsQAAAAAAAAAAAAAAACwxOAKrMDb86m1wv/SuDb/0LEW/9CxFv/Mrhf/tJ4v/6itpP+zx+H/tMnl/6zB
        4P+EpMv/WJDG/yqA1f8Zdtb/NHK1/0R+vf+Zs9X/scbi/7bK5f+2yuX/ssXf/6/C3P+ww97/tMnl/7PJ
        5v+zyeb/aXaKnwAAAAAAAAAAAAAAAAAAAACwxeGgp7jR/7C7wP/Xxkj/3cQc/72uV//dxBb/zLYc/6q5
        vf+1yub/scfl/6O83P+Hp87/b6LW/ymL6f8afeL/ZZLE/6O72/+ovdj/q7/a/63A2/+qvdj/pLbR/6S3
        0f+sv9r/s8nl/6q+2f1fa348AAAAAAAAAAAAAAAAAAAAALTJ5TGuwtz9qLjN/6q0u/+ytJz/srCA/87H
        X//NzpD/vbpn/7XL5/+1zOj/s8rn/6vC4P+uxuT/p8Lj/5e94/+but7/qsDd/6K10P+cr8j/qLrT/7PC
        1tC+zeHFscHX9q3A2P6vw9vbe4ufWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALXM56unu9T/r7ar/6au
        qP+tvtL/scHQ/7TJ4P+7zMz/tszo/7bN6P+2zen/tszo/rPK5fW4z+v1uM/r/bbN6f+qwNv/mazE/5Kk
        u/93gpOklqGwAQAAAADE1OgEwtHlDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt87pH7HH
        4vOnu9T/qbrQ/6ewtv+kqKT/sb7I/7XL5f+2zen/ts3o/7XM5/+fssvJmavDDJipvwiesMYnqL3Vm7PJ
        5P2fssz/nbDI/1Ndb2EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAutHsZKvA2v+ntsf/rJpv/5xvFv+ajGj/sr3F/7bN5/+3zun/tczn/2x3ibMAAAAAAAAAAAAA
        AAAAAAAAnK/FlqzB2/+mu9X/XWl8u1NdcAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAutLtnKi70f+oqJr/v50x/7OOE/+hiC7/sMHQ/7bO6P+zyuT/gI+j8kxS
        XiUAAAAAAAAAAAAAAACCkKBIudHr/7DG4P+mu9T/YGyAo1xnew0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC60uwFu9Lqsam4w/+2r4X/1bok/9O1D/+psaH/ts3m/7XM
        5f+yyOL/cn+R6UVLVm1CR1EkRkxVKHiFlay91vH/utLs/7HH4f+yyeP/hZWs5WJug3VgbIAXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC90+sFvdPqp6++zf+yuKf/1M5j/7LB
        vf+1zeX/t8/o/7XM5f+1zOX/qb/X/46ftP6WqL7+u9Pt/8Lb9v/A2fP/vtbw/7nR6/+60uz/vtbw/56y
        yvt+j6TDXWh8XQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADA1+8Bw9nwerzQ
        5fqswdj/r8be/7XM5f+3z+j/utPs/7vU7f+91e//v9jx/8Ha9P/C2/X/wtv1/8Xe+P/D3fb/w933/8Pc
        9v/E3ff/xd74/8bf+f+Hma35UFprAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAxd31M8jd9MjA0+j/s8rh/7bO5/+60uv/vtfw/7jU6/+pyd3/kLbF/6vL4P/E3ff/xd74/8bg
        +v/H4Pr/yOH6/8jh+v/I4fv/yOH7/4GRpLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAx9/3Acff9k7N4ve9yNzx/MPY7f+81e3/pcbZ/0mXkf8niHn/ha66/8fh
        +v/G3/n/yOH7/8ji+//I4vv/yeP8/8rj/P+fs8e6f5CiEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADL4voczeT7aNDl+q3I4Pbor9Xm/qHS
        3v+62O7/yOH7/8nj/P/J4vv/yuP9/8nj/Pq/1++9orfLUoyesAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMrj
        +wHI4vsdyeP8Q8rk/WTK5P13yuT9eMnj/GbJ4/xAxN32EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD///gB///wA///gAAf/gAAAfgAAABwAAAAMAAAACAAAAAgAAAAIAA
        AACAAAADgAAAA4AAAAOAAAADgAAAA4AAAAPAAAADwAAAB+AAAJ/gAAH/8AHg//gA4H/4AAAf/AAAB/4A
        AAP/gAAH/8AAB//4AA///wB///////////8=
</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Paramétrage des tracés</value>
  </data>
</root>